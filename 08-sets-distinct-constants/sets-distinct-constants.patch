From 911d4b534f41f88bc5f8151b529f4022030f63fe Mon Sep 17 00:00:00 2001
From: Test User <test@example.com>
Date: Wed, 8 Oct 2025 14:38:25 +0000
Subject: [PATCH] Optimize sets with distinct constants

---
 src/jvm/clojure/lang/LispReader.java | 51 +++++++++++++++++++++++++++-
 1 file changed, 50 insertions(+), 1 deletion(-)

diff --git a/src/jvm/clojure/lang/LispReader.java b/src/jvm/clojure/lang/LispReader.java
index 8d7079cf..b1373e5d 100644
--- a/src/jvm/clojure/lang/LispReader.java
+++ b/src/jvm/clojure/lang/LispReader.java
@@ -1101,7 +1101,56 @@ public static class SyntaxQuoteReader extends AFn{
 				}
 			else if(form instanceof IPersistentSet)
 				{
-				ret = RT.list(APPLY, HASHSET, RT.list(SEQ, RT.cons(CONCAT, sqExpandList(((IPersistentSet) form).seq()))));
+				ISeq seq = ((IPersistentSet) form).seq();
+				// Optimize sets with distinct constant elements to use set literals
+				if(seq != null && seq.count() > 0)
+					{
+					boolean hasDistinctConstantElements = true;
+					IPersistentSet seenElements = PersistentHashSet.EMPTY;
+					
+					// Check if all elements are self-evaluating constants
+					// and that no two elements are equivalent
+					ISeq s = seq;
+					while(s != null)
+						{
+						Object element = s.first();
+						// Test for self-evaluating constants
+						if(!(element instanceof Keyword) && 
+						   !(element == null) && 
+						   !(element instanceof Number) && 
+						   !(element instanceof String) && 
+						   !(element instanceof Boolean) && 
+						   !(element instanceof Character))
+							{
+							hasDistinctConstantElements = false;
+							break;
+							}
+						
+						// Check for duplicate elements
+						if(seenElements.contains(element))
+							{
+							hasDistinctConstantElements = false;
+							break;
+							}
+						else
+							{
+							seenElements = (IPersistentSet) seenElements.cons(element);
+							}
+						
+						s = s.next();
+						}
+					
+					if(hasDistinctConstantElements)
+						{
+						// All elements are distinct constants, expand to set literal
+						ISeq expanded = sqExpandList(seq);
+						ret = PersistentHashSet.create(RT.toArray(expanded));
+						}
+					else
+						ret = RT.list(APPLY, HASHSET, RT.list(SEQ, RT.cons(CONCAT, sqExpandList(seq))));
+					}
+				else
+					ret = RT.list(APPLY, HASHSET, RT.list(SEQ, RT.cons(CONCAT, sqExpandList(seq))));
 				}
 			else if(form instanceof ISeq || form instanceof IPersistentList)
 				{
-- 
2.51.0

