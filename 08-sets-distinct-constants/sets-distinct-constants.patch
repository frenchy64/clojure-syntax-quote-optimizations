From cee5d77f3b66ffdf8d72d3d353592b6420f5315d Mon Sep 17 00:00:00 2001
From: GitHub Copilot <copilot@github.com>
Date: Wed, 8 Oct 2025 13:59:25 +0000
Subject: [PATCH] Optimize syntax-quote for sets with distinct constants

---
 src/jvm/clojure/lang/LispReader.java | 50 +++++++++++++++++++++++++++-
 1 file changed, 49 insertions(+), 1 deletion(-)

diff --git a/src/jvm/clojure/lang/LispReader.java b/src/jvm/clojure/lang/LispReader.java
index 8d7079c..10cde88 100644
--- a/src/jvm/clojure/lang/LispReader.java
+++ b/src/jvm/clojure/lang/LispReader.java
@@ -1101,7 +1101,55 @@ public static class SyntaxQuoteReader extends AFn{
 				}
 			else if(form instanceof IPersistentSet)
 				{
-				ret = RT.list(APPLY, HASHSET, RT.list(SEQ, RT.cons(CONCAT, sqExpandList(((IPersistentSet) form).seq()))));
+				ISeq seq = ((IPersistentSet) form).seq();
+				// Check if all elements are distinct constants
+				boolean hasDistinctConstants = false;
+				if(seq != null)
+					{
+					hasDistinctConstants = true;
+					PersistentVector elements = PersistentVector.EMPTY;
+					// Check each element
+					for(ISeq s = seq; s != null; s = s.next())
+						{
+						Object element = s.first();
+						// Element must not be unquote or unquote-splicing (must be constant)
+						if(isUnquote(element) || isUnquoteSplicing(element))
+							{
+							hasDistinctConstants = false;
+							break;
+							}
+						// Check if this element is distinct from previous elements
+						for(ISeq e = elements.seq(); e != null; e = e.next())
+							{
+							if(Util.equiv(e.first(), element))
+								{
+								hasDistinctConstants = false;
+								break;
+								}
+							}
+						if(!hasDistinctConstants)
+							break;
+						elements = elements.cons(element);
+						}
+					}
+				// `#{:a :b :c} => #{:a :b :c} (if all elements are distinct constants)
+				if(hasDistinctConstants && seq != null)
+					{
+					// Expand each element through syntax-quote
+					PersistentVector expanded = PersistentVector.EMPTY;
+					for(ISeq s = seq; s != null; s = s.next())
+						{
+						Object item = s.first();
+						if(isUnquote(item))
+							expanded = expanded.cons(RT.second(item));
+						else
+							expanded = expanded.cons(syntaxQuote(item));
+						}
+					ret = PersistentHashSet.create(RT.toArray(expanded));
+					}
+				else
+					ret = RT.list(APPLY, HASHSET, RT.list(SEQ, RT.cons(CONCAT, sqExpandList(seq))));
+				}
 				}
 			else if(form instanceof ISeq || form instanceof IPersistentList)
 				{
-- 
2.51.0

